// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      return function ($48) {
          return Data_Maybe.isJust(indexOf(pat)($48));
      };
  };
  exports["contains"] = contains;
  exports["indexOf"] = indexOf;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["trim"] = $foreign.trim;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Grey = (function () {
      function Grey() {

      };
      Grey.value = new Grey();
      return Grey;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  exports["White"] = White;
  exports["Black"] = Black;
  exports["Blue"] = Blue;
  exports["Cyan"] = Cyan;
  exports["Green"] = Green;
  exports["Magenta"] = Magenta;
  exports["Red"] = Red;
  exports["Yellow"] = Yellow;
  exports["Grey"] = Grey;
  exports["BrightBlack"] = BrightBlack;
  exports["BrightRed"] = BrightRed;
  exports["BrightGreen"] = BrightGreen;
  exports["BrightYellow"] = BrightYellow;
  exports["BrightBlue"] = BrightBlue;
  exports["BrightMagenta"] = BrightMagenta;
  exports["BrightCyan"] = BrightCyan;
  exports["BrightWhite"] = BrightWhite;
})(PS["Ansi.Codes"] = PS["Ansi.Codes"] || {});
(function(exports) {// module Atom.Atom

  exports.getAtom = function() {
    return atom;
  }
})(PS["Atom.Atom"] = PS["Atom.Atom"] || {});
(function(exports) {exports.addImpl = function (cr) { return cr.add.bind(cr); };
})(PS["Atom.CommandRegistry"] = PS["Atom.CommandRegistry"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
  exports["whileE"] = $foreign.whileE;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($181) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($181));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 88, column 9 - line 90, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 84, column 5 - line 90, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Global"];
  exports["readInt"] = $foreign.readInt;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($143) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($143));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 78, column 12 - line 80, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function ($copy_acc) {
              return function ($copy_v) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          $tco_var_acc = new Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 73, column 15 - line 75, column 33: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return function ($144) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($144));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                                                  
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });           
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Data.Foreign line 145, column 1 - line 145, column 42: " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Util_FFI = PS["DOM.Util.FFI"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var textToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToParentNode = Unsafe_Coerce.unsafeCoerce;              
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["elementToParentNode"] = elementToParentNode;
  exports["elementToNode"] = elementToNode;
  exports["elementToEventTarget"] = elementToEventTarget;
  exports["textToNode"] = textToNode;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                   
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToDocument"] = htmlDocumentToDocument;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.CommandRegistry"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  var addCommand$prime = function (cr) {
      return function (elt) {
          return function (commandName) {
              return function (callback) {
                  return Control_Monad_Eff_Uncurried.runEffFn3($foreign.addImpl(cr))(elt)(commandName)(Control_Monad_Eff_Uncurried.mkEffFn1(callback));
              };
          };
      };
  };
  var addCommand = function (cr) {
      return function (selector) {
          return function (commandName) {
              return function (callback) {
                  return Control_Monad_Eff_Uncurried.runEffFn3($foreign.addImpl(cr))(selector)(commandName)(Control_Monad_Eff_Uncurried.mkEffFn1(callback));
              };
          };
      };
  };
  exports["addCommand"] = addCommand;
  exports["addCommand'"] = addCommand$prime;
})(PS["Atom.CommandRegistry"] = PS["Atom.CommandRegistry"] || {});
(function(exports) {// module Atom.Config

  exports.getConfigImpl = function(config) { return config.get.bind(config); };
})(PS["Atom.Config"] = PS["Atom.Config"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Config"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var getConfig = function ($1) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.getConfigImpl($1));
  };
  exports["getConfig"] = getConfig;
})(PS["Atom.Config"] = PS["Atom.Config"] || {});
(function(exports) {

  exports.grammarForScopeName = function(gr) {
    return function (s) {
      return function() {
        return gr.grammarForScopeName(s);
      };
    };
  };
})(PS["Atom.GrammarRegistry"] = PS["Atom.GrammarRegistry"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.GrammarRegistry"];
  var Atom_Grammar = PS["Atom.Grammar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["grammarForScopeName"] = $foreign.grammarForScopeName;
})(PS["Atom.GrammarRegistry"] = PS["Atom.GrammarRegistry"] || {});
(function(exports) {

  exports.addError = function addError(nm) {
    return function(message) {
      return function() {
        nm.addError(message);
      };
    };
  };
})(PS["Atom.NotificationManager"] = PS["Atom.NotificationManager"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.NotificationManager"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  exports["addError"] = $foreign.addError;
})(PS["Atom.NotificationManager"] = PS["Atom.NotificationManager"] || {});
(function(exports) {// module Atom.Project

  exports.getPaths = function(project) {
    return function() {
      return project.getPaths();
    };
  };
})(PS["Atom.Project"] = PS["Atom.Project"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Project"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["getPaths"] = $foreign.getPaths;
})(PS["Atom.Project"] = PS["Atom.Project"] || {});
(function(exports) {                                                   

  exports.getActiveTextEditorImpl = function (w) {
    return function() {
      return w.getActiveTextEditor();
    };
  };

  exports.addModalPanelImpl = function (w) {
    return w.addModalPanel.bind(w);
  };

  exports.destroyPanel = function (p) {
    return function() {
      p.destroy();
    };
  };

  exports.openImpl = function (w) {
    return function (name, opt, cb, err) {
      return w.open(name,opt).then(cb, err);
    };
  };

  exports.addOpenerImpl = function (w) {
    return w.addOpener.bind(w);
  };

  exports.paneForItemImpl = function (w) {
    return w.paneForItem.bind(w);
  };
})(PS["Atom.Workspace"] = PS["Atom.Workspace"] || {});
(function(exports) {                                                                       
  exports.getPathImpl = function (e) { return function () { return e.getPath(); }; };

  exports.getText = function (e) { return function () { return e.getText(); }; };
  exports.getTextInRangeImpl = function(e) {
    return e.getTextInBufferRange.bind(e);
  };
  exports.getSelectedText = function (e) { return function () { return e.getSelectedText(); }; };
  exports.setTextImpl = function(e) { return e.setText.bind(e); }     

  exports.getCursorBufferPosition = function (e) { return function () { return e.getCursorBufferPosition(); }; };
  exports.moveDownImpl = function (e) { return e.moveDown.bind(e); };

  exports.moveToBeginningOfLine = function(e) { return function () { return e.moveToBeginningOfLine(); }; };

  exports.isTextEditor = function (item) {
    var TextEditor = require('atom').TextEditor;
    return item instanceof TextEditor;
  };
})(PS["Atom.Editor"] = PS["Atom.Editor"] || {});
(function(exports) {// module Atom.Point

  exports.getRow = function(p) { return p.row; };
  exports.getColumn = function(p) { return p.column; };
  exports.mkPoint = function (x) {
    return function (y) {
      var Point = require('atom').Point;
      return new Point(x,y);
    };
  };
})(PS["Atom.Point"] = PS["Atom.Point"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Point"];
  exports["getRow"] = $foreign.getRow;
  exports["getColumn"] = $foreign.getColumn;
  exports["mkPoint"] = $foreign.mkPoint;
})(PS["Atom.Point"] = PS["Atom.Point"] || {});
(function(exports) {
  exports.mkRangeImpl = function(p1, p2) {
    var Range = require('atom').Range;
    return new Range(p1,p2);
  };
})(PS["Atom.Range"] = PS["Atom.Range"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Range"];
  var Atom_Point = PS["Atom.Point"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var mkRange = Data_Function_Uncurried.runFn2($foreign.mkRangeImpl);
  exports["mkRange"] = mkRange;
})(PS["Atom.Range"] = PS["Atom.Range"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Editor"];
  var Atom_Grammar = PS["Atom.Grammar"];
  var Atom_Point = PS["Atom.Point"];
  var Atom_Range = PS["Atom.Range"];
  var Atom_TextBuffer = PS["Atom.TextBuffer"];
  var Atom_Types = PS["Atom.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var toEditor = function (item) {
      var $2 = $foreign.isTextEditor(item);
      if ($2) {
          return new Data_Maybe.Just(item);
      };
      return Data_Maybe.Nothing.value;
  };
  var setText = function ($11) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.setTextImpl($11));
  };
  var moveDown = function ($13) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.moveDownImpl($13));
  };
  var getTextInRange = function ($15) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.getTextInRangeImpl($15));
  };
  var getPath = function (editor) {
      return function __do() {
          var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Foreign.readString)($foreign.getPathImpl(editor))();
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(v));
      };
  };
  exports["getPath"] = getPath;
  exports["getTextInRange"] = getTextInRange;
  exports["setText"] = setText;
  exports["toEditor"] = toEditor;
  exports["moveDown"] = moveDown;
  exports["getText"] = $foreign.getText;
  exports["getSelectedText"] = $foreign.getSelectedText;
  exports["getCursorBufferPosition"] = $foreign.getCursorBufferPosition;
  exports["moveToBeginningOfLine"] = $foreign.moveToBeginningOfLine;
})(PS["Atom.Editor"] = PS["Atom.Editor"] || {});
(function(exports) {// module Atom.Pane

  exports.destroyItemImpl = function (p) {
    return p.destroyItem.bind(p);
  };
})(PS["Atom.Pane"] = PS["Atom.Pane"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Pane"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Prelude = PS["Prelude"];        
  var destroyItem = function ($0) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.destroyItemImpl($0));
  };
  exports["destroyItem"] = destroyItem;
})(PS["Atom.Pane"] = PS["Atom.Pane"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Workspace"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_Pane = PS["Atom.Pane"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var paneForItem = function (w) {
      return function (a) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Control_Monad_Eff_Uncurried.runEffFn1($foreign.paneForItemImpl(w))(a));
      };
  };
  var open = function (w) {
      return function (s) {
          return function (o) {
              return function (cb) {
                  return function (err) {
                      return Control_Monad_Eff_Uncurried.runEffFn4($foreign.openImpl(w))(s)(o)(Control_Monad_Eff_Uncurried.mkEffFn1(cb))(err);
                  };
              };
          };
      };
  };
  var getActiveTextEditor = function (w) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Atom_Editor.toEditor)($foreign.getActiveTextEditorImpl(w));
  };
  var defaultOpenOptions = {
      initialLine: 0,
      initialColumn: 0,
      split: "left",
      activatePane: true,
      activateItem: true,
      pending: false,
      searchAllPanes: false
  };
  var addOpener = function (w) {
      return function (f) {
          return Control_Monad_Eff_Uncurried.runEffFn1($foreign.addOpenerImpl(w))(Control_Monad_Eff_Uncurried.mkEffFn1(f));
      };
  };
  var addModalPanel = function (w) {
      return function (item) {
          return function (visible) {
              return function (priority) {
                  return Control_Monad_Eff_Uncurried.runEffFn1($foreign.addModalPanelImpl(w))({
                      item: item,
                      visible: visible,
                      priority: priority
                  });
              };
          };
      };
  };
  exports["getActiveTextEditor"] = getActiveTextEditor;
  exports["addModalPanel"] = addModalPanel;
  exports["open"] = open;
  exports["defaultOpenOptions"] = defaultOpenOptions;
  exports["addOpener"] = addOpener;
  exports["paneForItem"] = paneForItem;
  exports["destroyPanel"] = $foreign.destroyPanel;
})(PS["Atom.Workspace"] = PS["Atom.Workspace"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Atom.Atom"];
  var Atom_Clipboard = PS["Atom.Clipboard"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Config = PS["Atom.Config"];
  var Atom_GrammarRegistry = PS["Atom.GrammarRegistry"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Atom_Project = PS["Atom.Project"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["getAtom"] = $foreign.getAtom;
})(PS["Atom.Atom"] = PS["Atom.Atom"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {// module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(function (x) {
            succCB(x)();
          }, function (e) {
            errCB(e)();
          });
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Promise"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Control_Monad_Eff_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.id(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Foreign.unsafeReadTagged("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Monad_Eff_Exception.error)(Data_Foreign.readString(fn)))));
  };
  var toAff = function (p) {
      return Control_Monad_Aff.makeAff(function (errCB) {
          return function (succCB) {
              return $foreign.thenImpl(p)(function ($1) {
                  return errCB(coerce($1));
              })(succCB);
          };
      });
  };
  var toAffE = function (f) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(f))(toAff);
  };
  exports["toAff"] = toAff;
  exports["toAffE"] = toAffE;
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var blur = "blur";
  exports["blur"] = blur;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };

  exports.createTextNode = function (data) {
    return function (doc) {
      return function () {
        return doc.createTextNode(data);
      };
    };
  };
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  exports["createElement"] = $foreign.createElement;
  exports["createTextNode"] = $foreign.createTextNode;
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
    "use strict";

  exports.className = function (node) {
    return function () {
      return node.className;
    };
  };

  exports.setClassName = function (className) {
    return function (node) {
      return function () {
        node.className = className;
        return {};
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.scrollTop = function (node) {
    return function () {
      return node.scrollTop;
    };
  };

  exports.setScrollTop = function (scrollTop) {
    return function (node) {
      return function () {
        node.scrollTop = scrollTop;
        return {};
      };
    };
  };

  exports.scrollHeight = function (el) {
    return function () {
      return el.scrollHeight;
    };
  };
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.Element"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  exports["setClassName"] = $foreign.setClassName;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["setScrollTop"] = $foreign.setScrollTop;
  exports["scrollHeight"] = $foreign.scrollHeight;
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports.hasChildNodes = function (node) {
    return function () {
      return node.hasChildNodes();
    };
  };                                            

  exports._firstChild = getEffProp("firstChild");

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var firstChild = function ($10) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._firstChild($10));
  };
  exports["firstChild"] = firstChild;
  exports["hasChildNodes"] = $foreign.hasChildNodes;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";                                             

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  exports["querySelector"] = querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {// module DOM.Util

  exports.setTimeout = function(n) {
    return function (f) {
      return function() {
        return setTimeout(f, n);
      };
    };
  };
})(PS["DOM.Util"] = PS["DOM.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Util"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["DOM.Util"] = PS["DOM.Util"] || {});
(function(exports) {
    "use strict";       

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Prelude = PS["Prelude"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp; 
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  }; 
  var indexableForeign = new Indexable(function (dictIndex) {
      return index(dictIndex);
  });
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                             
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["readProp"] = readProp;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
  exports["indexableForeign"] = indexableForeign;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();                                         
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["SIGABRT"] = SIGABRT;
  exports["SIGALRM"] = SIGALRM;
  exports["SIGBUS"] = SIGBUS;
  exports["SIGCHLD"] = SIGCHLD;
  exports["SIGCLD"] = SIGCLD;
  exports["SIGCONT"] = SIGCONT;
  exports["SIGEMT"] = SIGEMT;
  exports["SIGFPE"] = SIGFPE;
  exports["SIGHUP"] = SIGHUP;
  exports["SIGILL"] = SIGILL;
  exports["SIGINFO"] = SIGINFO;
  exports["SIGINT"] = SIGINT;
  exports["SIGIO"] = SIGIO;
  exports["SIGIOT"] = SIGIOT;
  exports["SIGKILL"] = SIGKILL;
  exports["SIGLOST"] = SIGLOST;
  exports["SIGPIPE"] = SIGPIPE;
  exports["SIGPOLL"] = SIGPOLL;
  exports["SIGPROF"] = SIGPROF;
  exports["SIGPWR"] = SIGPWR;
  exports["SIGQUIT"] = SIGQUIT;
  exports["SIGSEGV"] = SIGSEGV;
  exports["SIGSTKFLT"] = SIGSTKFLT;
  exports["SIGSTOP"] = SIGSTOP;
  exports["SIGSYS"] = SIGSYS;
  exports["SIGTERM"] = SIGTERM;
  exports["SIGTRAP"] = SIGTRAP;
  exports["SIGTSTP"] = SIGTSTP;
  exports["SIGTTIN"] = SIGTTIN;
  exports["SIGTTOU"] = SIGTTOU;
  exports["SIGUNUSED"] = SIGUNUSED;
  exports["SIGURG"] = SIGURG;
  exports["SIGUSR1"] = SIGUSR1;
  exports["SIGUSR2"] = SIGUSR2;
  exports["SIGVTALRM"] = SIGVTALRM;
  exports["SIGWINCH"] = SIGWINCH;
  exports["SIGXCPU"] = SIGXCPU;
  exports["SIGXFSZ"] = SIGXFSZ;
  exports["fromString"] = fromString;
})(PS["Data.Posix.Signal"] = PS["Data.Posix.Signal"] || {});
(function(exports) {
    "use strict";    

  exports.runST = function (f) {
    return f;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["pureST"] = pureST;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["match"] = match;
  exports["split"] = $foreign.split;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];        
  var modulePart = "((?:[A-Z][A-Za-z0-9]*\\.)*(?:[A-Z][A-Za-z0-9]*))";
  var modulePrefix = "(?:^|[^A-Za-z_.])(?:" + (modulePart + "\\.)");
  var identifierAtPoint = function (line) {
      return function (column) {
          var wordRange = function (left) {
              return function (right) {
                  return {
                      left: column - left | 0,
                      right: column + right | 0
                  };
              };
          };
          var textBefore = Data_String.take(column)(line);
          var textAfter = Data_String.drop(column)(line);
          var moduleEndRegex = Data_String_Regex.regex(modulePrefix + "$")(Data_String_Regex_Flags.noFlags);
          var match$prime = function (r) {
              return function (t) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function (r$prime) {
                      return Data_String_Regex.match(r$prime)(t);
                  })(r);
              };
          };
          var beforeRegex = Data_String_Regex.regex("[a-zA-Z_0-9':!#$%&*+/<=>?@^|~-]*$")(Data_String_Regex_Flags.noFlags);
          var afterRegex = Data_String_Regex.regex("^[a-zA-Z_0-9':!#$%&*+/<=>?@^|~-]*")(Data_String_Regex_Flags.noFlags);
          var v = match$prime(afterRegex)(textAfter);
          var v1 = match$prime(beforeRegex)(textBefore);
          if (v1 instanceof Data_Maybe.Just && (v1.value0.length === 1 && (v1["value0"][0] instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && (v.value0.length === 1 && v["value0"][0] instanceof Data_Maybe.Just))))) {
              var qualifier = (function () {
                  var v2 = match$prime(moduleEndRegex)(Data_String.take(Data_String.length(textBefore) - Data_String.length(v1["value0"][0].value0) | 0)(textBefore));
                  if (v2 instanceof Data_Maybe.Just && v2.value0.length === 2) {
                      return v2["value0"][1];
                  };
                  return Data_Maybe.Nothing.value;
              })();
              return new Data_Maybe.Just({
                  word: v1["value0"][0].value0 + v["value0"][0].value0,
                  range: wordRange(Data_String.length(v1["value0"][0].value0))(Data_String.length(v["value0"][0].value0)),
                  qualifier: qualifier
              });
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["modulePart"] = modulePart;
  exports["modulePrefix"] = modulePrefix;
  exports["identifierAtPoint"] = identifierAtPoint;
})(PS["IdePurescript.Tokens"] = PS["IdePurescript.Tokens"] || {});
(function(exports) {
    "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var vscode_uri_1 =require("vscode-uri");                                                                          
  exports.filenameToUri = function (filename) { return function () { return vscode_uri_1.default.file(filename).toString(); }; };
})(PS["LanguageServer.Uri"] = PS["LanguageServer.Uri"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["LanguageServer.Uri"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var LanguageServer_Types = PS["LanguageServer.Types"];
  exports["filenameToUri"] = $foreign.filenameToUri;
})(PS["LanguageServer.Uri"] = PS["LanguageServer.Uri"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_Point = PS["Atom.Point"];
  var Atom_Range = PS["Atom.Range"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var IdePurescript_Tokens = PS["IdePurescript.Tokens"];
  var LanguageServer_Types = PS["LanguageServer.Types"];
  var LanguageServer_Uri = PS["LanguageServer.Uri"];
  var Prelude = PS["Prelude"];        
  var getLinePosition = function (ed) {
      return function __do() {
          var v = Atom_Editor.getCursorBufferPosition(ed)();
          var range = Atom_Range.mkRange(Atom_Point.mkPoint(Atom_Point.getRow(v))(0))(Atom_Point.mkPoint(Atom_Point.getRow(v))(1000));
          var col = Atom_Point.getColumn(v);
          var v1 = Atom_Editor.getTextInRange(ed)(range)();
          return {
              line: v1,
              pos: v,
              col: col,
              range: range
          };
      };
  };
  var getToken = function (ed) {
      return function __do() {
          var v = getLinePosition(ed)();
          var v1 = Atom_Editor.getTextInRange(ed)(v.range)();
          var pt = function (x) {
              return Atom_Point.mkPoint(Atom_Point.getRow(v.pos))(x);
          };
          var rng = function (v2) {
              return Atom_Range.mkRange(pt(v2.left))(pt(v2.right));
          };
          var v2 = IdePurescript_Tokens.identifierAtPoint(v1)(v.col);
          if (v2 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just({
                  word: v2.value0.word,
                  range: rng(v2.value0.range),
                  qualifier: v2.value0.qualifier
              });
          };
          if (v2 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at IdePurescript.Atom.Editor line 31, column 8 - line 33, column 23: " + [ v2.constructor.name ]);
      };
  };
  var getActivePosInfo = function __do() {
      var v = Atom_Atom.getAtom();
      return Control_Bind.bind(Control_Monad_Eff.bindEff)(Atom_Workspace.getActiveTextEditor(v.workspace))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value))(function (ed) {
          return function __do() {
              var v1 = getLinePosition(ed)();
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Atom_Editor.getPath(ed))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value))(function (path) {
                  return function __do() {
                      var v2 = LanguageServer_Uri.filenameToUri(path)();
                      return new Data_Maybe.Just({
                          line: v1.line,
                          pos: v1.pos,
                          ed: ed,
                          uri: v2
                      });
                  };
              }))();
          };
      }))();
  };
  exports["getLinePosition"] = getLinePosition;
  exports["getToken"] = getToken;
  exports["getActivePosInfo"] = getActivePosInfo;
})(PS["IdePurescript.Atom.Editor"] = PS["IdePurescript.Atom.Editor"] || {});
(function(exports) {var AutoLanguageClient = require('@nwolverson/atom-languageclient').AutoLanguageClient;

  exports.makeLanguageClient = function (clientMixin, translateSettings, onConnection) {
    var client = new AutoLanguageClient();
    var connection;
    return Object.assign(client, clientMixin, {
      preInitialization: function(conn) {
        connection = conn;
        onConnection(conn);
      },
      postInitialization: function(){
        this._disposable.add(
          atom.config.observe("ide-purescript", function (params) {
            connection.didChangeConfiguration({
              settings: { purescript: translateSettings(params) }
            });
          })
        );
      },
      getGrammarScopes: function() { return [ 'source.purescript']; },
      getLanguageName: function() { return 'PureScript'; },
      getServerName: function() { return 'purescript-language-server' },
      startServerProcess: function (projectPath) {
        console.log("Using project path for cwd: " + projectPath);
        return client.spawnChildNode([ require.resolve('purescript-language-server'), '--stdio', "--config", "{}" ],
          {
            cwd: projectPath
          })
      },
      onDidInsertSuggestion: function (arg, item) {
        console.log(item);
        connection.executeCommand(item.command);
      }
    })
  }

  exports.executeCommandImpl = function (connection, params) {
    return connection.executeCommand(params);
  };

  exports.onCustomImpl = function (connection, method, callback) {
    connection.onCustom(method, callback);
  };
})(PS["IdePurescript.Atom.Hooks.LanguageClient"] = PS["IdePurescript.Atom.Hooks.LanguageClient"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.Hooks.LanguageClient"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Promise = PS["Control.Promise"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var onCustom = function (conn) {
      return function (name) {
          return function (cb) {
              return Control_Monad_Eff_Uncurried.runEffFn3($foreign.onCustomImpl)(conn)(name)(Control_Monad_Eff_Uncurried.mkEffFn1(cb));
          };
      };
  };
  var executeCommand = function (conn) {
      return function (params) {
          return Control_Promise.toAffE(Control_Monad_Eff_Uncurried.runEffFn2($foreign.executeCommandImpl)(conn)(params));
      };
  };
  exports["executeCommand"] = executeCommand;
  exports["onCustom"] = onCustom;
  exports["makeLanguageClient"] = $foreign.makeLanguageClient;
})(PS["IdePurescript.Atom.Hooks.LanguageClient"] = PS["IdePurescript.Atom.Hooks.LanguageClient"] || {});
(function(exports) {// module IdePurescript.Atom.PromptPanel

  exports.getEditorModel = function (editor) {
    return function () { return editor.getModel(); };
  }

  exports.focus = function (e) {
    return function () {
      e.focus();
    }
  }

  exports.getActiveElement = function () {
    return document.activeElement;
  };
})(PS["IdePurescript.Atom.PromptPanel"] = PS["IdePurescript.Atom.PromptPanel"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.PromptPanel"];
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Document = PS["DOM.Node.Document"];
  var DOM_Node_Element = PS["DOM.Node.Element"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var addPromptPanel = function (promptText) {
      return function (initialText) {
          return Control_Monad_Aff.makeAff(function (err) {
              return function (succ) {
                  return function __do() {
                      var v = Atom_Atom.getAtom();
                      var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToDocument)(Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document))();
                      var v2 = DOM_Node_Document.createElement("div")(v1)();
                      var v3 = DOM_Node_Document.createTextNode(promptText)(v1)();
                      var v4 = DOM_Node_Node.appendChild(DOM_Node_Types.textToNode(v3))(DOM_Node_Types.elementToNode(v2))();
                      var v5 = DOM_Node_Document.createElement("atom-text-editor")(v1)();
                      DOM_Node_Element.setAttribute("mini")("mini")(v5)();
                      var v6 = DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(v5))(DOM_Node_Types.elementToNode(v2))();
                      var v7 = Atom_Workspace.addModalPanel(v.workspace)(v2)(true)(100)();
                      var v8 = $foreign.getEditorModel(v5)();
                      var v9 = Atom_Editor.setText(v8)(initialText)();
                      var v10 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign.getActiveElement)();
                      $foreign.focus(v5)();
                      var close = function (isSucc) {
                          return function (v11) {
                              return function __do() {
                                  var v12 = $foreign.getEditorModel(v5)();
                                  var v13 = Atom_Editor.getText(v12)();
                                  Atom_Workspace.destroyPanel(v7)();
                                  Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))($foreign.focus)(v10)();
                                  return succ((function () {
                                      if (isSucc) {
                                          return new Data_Maybe.Just(v13);
                                      };
                                      return Data_Maybe.Nothing.value;
                                  })())();
                              };
                          };
                      };
                      Atom_CommandRegistry["addCommand'"](v.commands)(v5)("core:confirm")(close(true))();
                      Atom_CommandRegistry["addCommand'"](v.commands)(v5)("core:cancel")(close(false))();
                      return DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.blur)(DOM_Event_EventTarget.eventListener(close(false)))(true)(DOM_Node_Types.elementToEventTarget(v5))();
                  };
              };
          });
      };
  };
  exports["addPromptPanel"] = addPromptPanel;
  exports["focus"] = $foreign.focus;
})(PS["IdePurescript.Atom.PromptPanel"] = PS["IdePurescript.Atom.PromptPanel"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var LanguageServer_Types = PS["LanguageServer.Types"];
  var Prelude = PS["Prelude"];        
  var CommandInfo = (function () {
      function CommandInfo(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CommandInfo.create = function (value0) {
          return function (value1) {
              return new CommandInfo(value0, value1);
          };
      };
      return CommandInfo;
  })();                                                                                        
  var cmdName = function (v) {
      return "purescript." + v.value1;
  };
  var caseSplitCmd = new CommandInfo("Case split (explicit position)", "caseSplit-explicit");
  var c = function (v) {
      return function (args) {
          return {
              title: v.value0,
              command: cmdName(v),
              "arguments": Data_Nullable.toNullable(args)
          };
      };
  };                                                                               
  var addCompletionImportCmd = new CommandInfo("Add completion import", "addCompletionImport");
  var addCompletionImport = function (ident) {
      return function (mod) {
          return function (qual) {
              return function (uri) {
                  return c(addCompletionImportCmd)(new Data_Maybe.Just([ Data_Foreign.toForeign(ident), Data_Foreign.toForeign(Data_Nullable.toNullable(mod)), Data_Foreign.toForeign(Data_Nullable.toNullable(qual)), Data_Foreign.toForeign(uri) ]));
              };
          };
      };
  };
  var addClauseCmd = new CommandInfo("Add clause (explicit position/cmd)", "addClause-explicit");
  exports["cmdName"] = cmdName;
  exports["c"] = c;
  exports["CommandInfo"] = CommandInfo;
  exports["caseSplitCmd"] = caseSplitCmd;
  exports["addClauseCmd"] = addClauseCmd;
  exports["addCompletionImportCmd"] = addCompletionImportCmd;
  exports["addCompletionImport"] = addCompletionImport;
})(PS["LanguageServer.IdePurescript.Commands"] = PS["LanguageServer.IdePurescript.Commands"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Config = PS["Atom.Config"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Atom_Point = PS["Atom.Point"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var IdePurescript_Atom_Editor = PS["IdePurescript.Atom.Editor"];
  var IdePurescript_Atom_Hooks_LanguageClient = PS["IdePurescript.Atom.Hooks.LanguageClient"];
  var IdePurescript_Atom_PromptPanel = PS["IdePurescript.Atom.PromptPanel"];
  var LanguageServer_IdePurescript_Commands = PS["LanguageServer.IdePurescript.Commands"];
  var Prelude = PS["Prelude"];
  var PscIde = PS["PscIde"];        
  var launchAffAndRaise = (function () {
      var raiseError = function (e) {
          return function __do() {
              var v = Atom_Atom.getAtom();
              return Atom_NotificationManager.addError(v.notifications)(Data_Show.show(Control_Monad_Eff_Exception.showError)(e))();
          };
      };
      return function ($10) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(raiseError)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($10));
      };
  })();
  var caseSplit = function (conn) {
      return Control_Bind.bind(Control_Monad_Eff.bindEff)(IdePurescript_Atom_Editor.getActivePosInfo)(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (v) {
          return launchAffAndRaise(Control_Bind.bind(Control_Monad_Aff.bindAff)(IdePurescript_Atom_PromptPanel.addPromptPanel("Parameter type")(""))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(function (typ) {
              return Data_Functor.voidRight(Control_Monad_Aff.functorAff)(Data_Unit.unit)(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
                  command: LanguageServer_IdePurescript_Commands.cmdName(LanguageServer_IdePurescript_Commands.caseSplitCmd),
                  "arguments": [ Data_Foreign.toForeign(v.uri), Data_Foreign.toForeign(Atom_Point.getRow(v.pos)), Data_Foreign.toForeign(Atom_Point.getColumn(v.pos)), Data_Foreign.toForeign(typ) ]
              }));
          })));
      }));
  };
  var addClause = function (conn) {
      return Control_Bind.bind(Control_Monad_Eff.bindEff)(IdePurescript_Atom_Editor.getActivePosInfo)(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (v) {
          return launchAffAndRaise(Data_Functor.voidRight(Control_Monad_Aff.functorAff)(Data_Unit.unit)(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
              command: LanguageServer_IdePurescript_Commands.cmdName(LanguageServer_IdePurescript_Commands.addClauseCmd),
              "arguments": [ Data_Foreign.toForeign(v.uri), Data_Foreign.toForeign(Atom_Point.getRow(v.pos)), Data_Foreign.toForeign(Atom_Point.getColumn(v.pos)) ]
          })));
      }));
  };
  exports["launchAffAndRaise"] = launchAffAndRaise;
  exports["caseSplit"] = caseSplit;
  exports["addClause"] = addClause;
})(PS["IdePurescript.Atom.Assist"] = PS["IdePurescript.Atom.Assist"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Document = PS["DOM.Node.Document"];
  var DOM_Node_Element = PS["DOM.Node.Element"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Building = (function () {
      function Building() {

      };
      Building.value = new Building();
      return Building;
  })();
  var NotBuilding = (function () {
      function NotBuilding() {

      };
      NotBuilding.value = new NotBuilding();
      return NotBuilding;
  })();
  var statusIcon = function (v) {
      if (v instanceof Building) {
          return "purescript-build-status icon icon-hourglass";
      };
      if (v instanceof NotBuilding) {
          return "";
      };
      throw new Error("Failed pattern match at IdePurescript.Atom.BuildStatus line 32, column 1 - line 32, column 36: " + [ v.constructor.name ]);
  };
  var updateBuildStatus = function (elt) {
      return function (status) {
          return DOM_Node_Element.setClassName(statusIcon(status))(elt);
      };
  }; 
  var getBuildStatus = function __do() {
      var v = Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToDocument)(Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document))();
      var v1 = DOM_Node_Document.createElement("span")(v)();
      DOM_Node_Element.setClassName(statusIcon(NotBuilding.value))(v1)();
      var v2 = DOM_Node_Document.createTextNode("PS")(v)();
      var v3 = DOM_Node_Node.appendChild(DOM_Node_Types.textToNode(v2))(DOM_Node_Types.elementToNode(v1))();
      return v1;
  };
  exports["Building"] = Building;
  exports["NotBuilding"] = NotBuilding;
  exports["getBuildStatus"] = getBuildStatus;
  exports["statusIcon"] = statusIcon;
  exports["updateBuildStatus"] = updateBuildStatus;
})(PS["IdePurescript.Atom.BuildStatus"] = PS["IdePurescript.Atom.BuildStatus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var AIX = (function () {
      function AIX() {

      };
      AIX.value = new AIX();
      return AIX;
  })();
  var Darwin = (function () {
      function Darwin() {

      };
      Darwin.value = new Darwin();
      return Darwin;
  })();
  var FreeBSD = (function () {
      function FreeBSD() {

      };
      FreeBSD.value = new FreeBSD();
      return FreeBSD;
  })();
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();
  var OpenBSD = (function () {
      function OpenBSD() {

      };
      OpenBSD.value = new OpenBSD();
      return OpenBSD;
  })();
  var SunOS = (function () {
      function SunOS() {

      };
      SunOS.value = new SunOS();
      return SunOS;
  })();
  var Win32 = (function () {
      function Win32() {

      };
      Win32.value = new Win32();
      return Win32;
  })();
  var Android = (function () {
      function Android() {

      };
      Android.value = new Android();
      return Android;
  })();
  var fromString = function (v) {
      if (v === "aix") {
          return new Data_Maybe.Just(AIX.value);
      };
      if (v === "darwin") {
          return new Data_Maybe.Just(Darwin.value);
      };
      if (v === "freebsd") {
          return new Data_Maybe.Just(FreeBSD.value);
      };
      if (v === "linux") {
          return new Data_Maybe.Just(Linux.value);
      };
      if (v === "openbsd") {
          return new Data_Maybe.Just(OpenBSD.value);
      };
      if (v === "sunos") {
          return new Data_Maybe.Just(SunOS.value);
      };
      if (v === "win32") {
          return new Data_Maybe.Just(Win32.value);
      };
      if (v === "android") {
          return new Data_Maybe.Just(Android.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPlatform = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return true;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return true;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return true;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return true;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return true;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return true;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return true;
          };
          if (x instanceof Android && y instanceof Android) {
              return true;
          };
          return false;
      };
  });
  exports["AIX"] = AIX;
  exports["Darwin"] = Darwin;
  exports["FreeBSD"] = FreeBSD;
  exports["Linux"] = Linux;
  exports["OpenBSD"] = OpenBSD;
  exports["SunOS"] = SunOS;
  exports["Win32"] = Win32;
  exports["Android"] = Android;
  exports["fromString"] = fromString;
  exports["eqPlatform"] = eqPlatform;
})(PS["Node.Platform"] = PS["Node.Platform"] || {});
(function(exports) {
    "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
    "use strict";

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
            "chunk type; expected String or Buffer, got: " +
            chunk);
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 31, column 1 - line 31, column 37: " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Buffer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  exports["toString"] = toString;
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Stream"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];        
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Control_Monad_Eff_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream line 92, column 5 - line 96, column 17: " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(cb)(function ($17) {
                  return Control_Monad_Eff_Unsafe.unsafeCoerceEff(Node_Buffer.toString(enc)($17));
              }));
          };
      };
  };
  exports["onData"] = onData;
  exports["onDataString"] = onDataString;
  exports["onDataEither"] = onDataEither;
  exports["writeString"] = writeString;
  exports["end"] = $foreign.end;
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Process"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Data_StrMap = PS["Data.StrMap"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var platformStr = $foreign.process.platform;
  var platform = Node_Platform.fromString(platformStr);
  exports["platform"] = platform;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_Config = PS["Atom.Config"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];        
  var usePursDefault = true;
  var translateConfig = function (config1) {
      return Data_Either.either(Data_Function["const"](Data_Foreign.toForeign({})))(Control_Category.id(Control_Category.categoryFn))(Control_Monad_Except.runExcept((function () {
          var unchanged = [ "pursExe", "useCombinedExe", "pscIdeServerExe", "addNpmPath", "buildCommand", "fastRebuild", "censorWarnings" ];
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Traversable.traversableArray)(unchanged)(function (p) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create(p))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(config1)(p));
          }))(function (v) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(config1)("autocomplete"))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))([ Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create("autocompleteAddImport"))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(v1)("addImport")), Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create("autocompleteAllModules"))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(v1)("allModules")), Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create("autocompleteLimit"))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(v1)("limit")), Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create("autocompleteGrouped"))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(v1)("grouped")), Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create("importsPreferredModules"))(Data_Foreign_Index.ix(Data_Foreign_Index.indexableForeign)(Data_Foreign_Index.indexString)(v1)("preferredModules")) ]))(function (v2) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v2))));
                  });
              });
          });
      })()));
  };
  var pulpCmd = (function () {
      var $11 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
      if ($11) {
          return "pulp.cmd";
      };
      return "pulp";
  })();
  var defaultSrcGlob = [ "src/**/*.purs", "bower_components/**/*.purs" ];
  var config = Data_Foreign.toForeign({
      pscSourceGlob: {
          title: "PureScript source glob",
          description: "Source glob to use to find .purs source files. Currently used for psc-ide-server to power goto-definition. (Requires restart/server restart command)",
          type: "array",
          "default": defaultSrcGlob,
          items: {
              type: "string"
          }
      },
      pscIdeServerExe: {
          title: "psc-ide-server executable location",
          description: "The location of the `psc-ide-server` executable. Note this is *not* `psc-ide-client`. May be on the PATH. (Requires restart/server restart command)",
          type: "string",
          "default": "psc-ide-server"
      },
      pursExe: {
          title: "purs location",
          description: "The location of the combined `purs` executable. May be on the PATH. (Requires restart/server restart command)",
          type: "string",
          "default": "purs"
      },
      useCombinedExe: {
          title: "Use combined executable",
          description: "Whether to use the new combined purs executable. This will default to true in the future then go away.",
          type: "boolean",
          "default": usePursDefault
      },
      addNpmPath: {
          title: "Use npm bin directory",
          description: "Whether to add the local npm bin directory to the PATH (e.g. to use locally installed purs/psc-ide-server if available). (Requires restart/server restart command)",
          type: "boolean",
          "default": false
      },
      buildCommand: {
          title: "Build command",
          description: "Command line to build the project. " + ("Could be pulp (default), psc or a gulpfile, so long as it passes through errors from psc. " + ("Should output json errors (`--json-errors` flag). " + ("This is not interpreted via a shell, arguments can be specified but don't use shell features or a command with spaces in its path." + "See [examples on the README](https://github.com/nwolverson/atom-ide-purescript/#build-configuration-hints)"))),
          type: "string",
          "default": pulpCmd + " build -- --json-errors"
      },
      buildOnSave: {
          title: "Build on save",
          description: "Build automatically on save. Enables in-line and collected errors. Otherwise a build command is available to be invoked manually.",
          type: "boolean",
          "default": true
      },
      fastRebuild: {
          title: "Use fast rebuild",
          description: "Use psc-ide-server rebuild function to build the current file only on save",
          type: "boolean",
          "default": true
      },
      censorWarnings: {
          title: "Censor warnings",
          description: "The warning codes to censor, both for fast rebuild and a full build. Unrelated to any psa setup. e.g.: ShadowedName,MissingTypeDeclaration",
          type: "array",
          "default": [  ],
          items: {
              type: "string"
          }
      },
      psciCommand: {
          title: "psci command (eg 'psci' or 'pulp psci' or full path)",
          description: "Command line to use to launch PSCI for the repl buffer. " + "This is not interpreted via a shell, arguments can be specified but don't use shell features or a command with spaces in its path.",
          type: "string",
          "default": pulpCmd + " psci"
      },
      autocomplete: {
          type: "object",
          properties: {
              addImport: {
                  title: "Add import on autocomplete",
                  description: "Whether to automatically add imported identifiers when accepting autocomplete result.",
                  type: "boolean",
                  "default": true
              },
              allModules: {
                  title: "Suggest from all modules",
                  description: "Whether to always autocomplete from all built modules, or just those imported in the file. Suggestions from all modules always available by explicitly triggering autocomplete.",
                  type: "boolean",
                  "default": true
              },
              limit: {
                  title: "Result limit",
                  description: "Maximum number of results to fetch for an autocompletion request. May improve performance on large projects.",
                  type: "integer",
                  "default": 1000
              },
              grouped: {
                  title: "Group results",
                  type: "boolean",
                  "default": true,
                  description: "Whether to group completions in autocomplete results. Requires compiler 0.11.6"
              },
              preferredModules: {
                  type: "array",
                  "default": [ "Prelude" ],
                  description: "Module to prefer to insert when adding imports which have been re-exported. In order of preference, most preferred first.",
                  items: {
                      type: "string"
                  }
              },
              excludeLowerPriority: {
                  title: "Exclude other lower-priority providers",
                  description: "Whether to set the excludeLowerPriority flag for autocomplete+: disable this to see plain-text suggestions from context, for example. (Requires restart)",
                  type: "boolean",
                  "default": true
              }
          }
      }
  });
  exports["defaultSrcGlob"] = defaultSrcGlob;
  exports["usePursDefault"] = usePursDefault;
  exports["pulpCmd"] = pulpCmd;
  exports["translateConfig"] = translateConfig;
  exports["config"] = config;
})(PS["IdePurescript.Atom.Config"] = PS["IdePurescript.Atom.Config"] || {});
(function(exports) {// module IdePurescript.Atom.Hooks.Dependencies

  exports.installDependencies = function() {
    return require('atom-package-deps')
      .install('ide-purescript');
  }
})(PS["IdePurescript.Atom.Hooks.Dependencies"] = PS["IdePurescript.Atom.Hooks.Dependencies"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.Hooks.Dependencies"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  exports["installDependencies"] = $foreign.installDependencies;
})(PS["IdePurescript.Atom.Hooks.Dependencies"] = PS["IdePurescript.Atom.Hooks.Dependencies"] || {});
(function(exports) {// module IdePurescript.Atom.Hooks.StatusBar

  exports.addLeftTileImpl = function(statusBar, arg) { statusBar.addLeftTile(arg); };
})(PS["IdePurescript.Atom.Hooks.StatusBar"] = PS["IdePurescript.Atom.Hooks.StatusBar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.Hooks.StatusBar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];                                                        
  var addLeftTile = Control_Monad_Eff_Uncurried.runEffFn2($foreign.addLeftTileImpl);
  exports["addLeftTile"] = addLeftTile;
})(PS["IdePurescript.Atom.Hooks.StatusBar"] = PS["IdePurescript.Atom.Hooks.StatusBar"] || {});
(function(exports) {var SelectListView = require('atom-space-pen-views').SelectListView;

  exports.selectListViewStaticImpl = function(viewForItem, confirmed, filterKey, items) {
    function PurescriptSelectListView() {
      SelectListView.call(this);
    }

    PurescriptSelectListView.prototype = Object.create(SelectListView.prototype);
    PurescriptSelectListView.prototype.viewForItem = viewForItem;
    PurescriptSelectListView.prototype.show = function() {
      list.storeFocusedElement();
      this.panel = atom.workspace.addModalPanel({item: list, visible: true});
      list.focusFilterEditor();
    };
    PurescriptSelectListView.prototype.confirmed = function(item) {
      confirmed(item);
      this.panel && this.panel.destroy();
      this.restoreFocus();
    };
    PurescriptSelectListView.prototype.cancelled = function() {
      this.panel && this.panel.destroy();
      this.restoreFocus();
    };
    PurescriptSelectListView.prototype.getFilterKey = function() {
      return filterKey;
    };

    var list = new PurescriptSelectListView();
    list.setItems(items);
    list.show();
    return {};
  }
})(PS["IdePurescript.Atom.SelectView"] = PS["IdePurescript.Atom.SelectView"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.SelectView"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Promise = PS["Control.Promise"];
  var DOM = PS["DOM"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var selectListViewStatic = function (viewForItem) {
      return function (confirmed) {
          return function (filterKey) {
              return function (items) {
                  return Control_Monad_Eff_Uncurried.runEffFn4($foreign.selectListViewStaticImpl)(viewForItem)(Control_Monad_Eff_Uncurried.mkEffFn1(confirmed))(Data_Nullable.toNullable(filterKey))(items);
              };
          };
      };
  };
  exports["selectListViewStatic"] = selectListViewStatic;
})(PS["IdePurescript.Atom.SelectView"] = PS["IdePurescript.Atom.SelectView"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var IdePurescript_PscIdeServer = PS["IdePurescript.PscIdeServer"];
  var Prelude = PS["Prelude"];
  var launchAffAndRaise = (function () {
      var raiseError = function (e) {
          return function __do() {
              var v = Atom_Atom.getAtom();
              Control_Monad_Eff_Console.errorShow(Control_Monad_Eff_Exception.showError)(e)();
              return Atom_NotificationManager.addError(v.notifications)(Data_Show.show(Control_Monad_Eff_Exception.showError)(e))();
          };
      };
      return function ($6) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(raiseError)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($6));
      };
  })();
  exports["launchAffAndRaise"] = launchAffAndRaise;
})(PS["IdePurescript.Atom.Util"] = PS["IdePurescript.Atom.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var IdePurescript_Atom_Editor = PS["IdePurescript.Atom.Editor"];
  var IdePurescript_Atom_Hooks_LanguageClient = PS["IdePurescript.Atom.Hooks.LanguageClient"];
  var IdePurescript_Atom_PromptPanel = PS["IdePurescript.Atom.PromptPanel"];
  var IdePurescript_Atom_SelectView = PS["IdePurescript.Atom.SelectView"];
  var IdePurescript_Atom_Util = PS["IdePurescript.Atom.Util"];
  var LanguageServer_IdePurescript_Commands = PS["LanguageServer.IdePurescript.Commands"];
  var LanguageServer_Types = PS["LanguageServer.Types"];
  var LanguageServer_Uri = PS["LanguageServer.Uri"];
  var Node_FS = PS["Node.FS"];
  var Prelude = PS["Prelude"];
  var PscIde = PS["PscIde"];        
  var addModuleImport = function (conn) {
      var view = function (x) {
          return "<li>" + (x + "</li>");
      };
      var addImport = function (editor) {
          return function (mod) {
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Atom_Editor.getPath(editor))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (path) {
                  return function __do() {
                      var v = LanguageServer_Uri.filenameToUri(path)();
                      return IdePurescript_Atom_Util.launchAffAndRaise(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
                          command: "purescript.addModuleImport",
                          "arguments": [ Data_Foreign.toForeign(mod), Data_Foreign.toForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)), Data_Foreign.toForeign(v) ]
                      }))();
                  };
              }));
          };
      };
      return IdePurescript_Atom_Util.launchAffAndRaise(Control_Bind.bind(Control_Monad_Aff.bindAff)(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
          command: "purescript.getAvailableModules",
          "arguments": [  ]
      }))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Atom_Atom.getAtom))(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Atom_Workspace.getActiveTextEditor(v1.workspace)))(function (v2) {
                  var v3 = Control_Monad_Except.runExcept(Data_Foreign.readArray(v));
                  var v5 = function (v6) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Either.Right) {
                      var $27 = Control_Monad_Except.runExcept(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.readString)(v3.value0));
                      if ($27 instanceof Data_Either.Right) {
                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(IdePurescript_Atom_SelectView.selectListViewStatic(view)(addImport(v2.value0))(Data_Maybe.Nothing.value)($27.value0));
                      };
                      return v5(true);
                  };
                  return v5(true);
              });
          });
      }));
  };
  var addExplicitImport = function (conn) {
      var addIdentImport = function (ident) {
          return function (uri) {
              return function (mod) {
                  var view = function (v) {
                      return "<li>" + (v["module'"] + ("." + (v.identifier + "</li>")));
                  };
                  var addImp = function (v) {
                      return IdePurescript_Atom_Util.launchAffAndRaise(addIdentImport(ident)(uri)(new Data_Maybe.Just(v["module'"])));
                  };
                  var v = LanguageServer_IdePurescript_Commands.addCompletionImport(ident)(mod)(Data_Maybe.Nothing.value)(uri);
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
                      command: v.command,
                      "arguments": Data_Maybe.fromMaybe([  ])(Data_Nullable.toMaybe(v["arguments"]))
                  }))(function (v1) {
                      var v2 = Control_Monad_Except.runExcept(Data_Foreign.readArray(v1));
                      var v3 = function (v4) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          var $40 = Control_Monad_Except.runExcept(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.readString)(v2.value0));
                          if ($40 instanceof Data_Either.Right) {
                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(IdePurescript_Atom_SelectView.selectListViewStatic(view)(addImp)(new Data_Maybe.Just("module'"))(Data_Functor.map(Data_Functor.functorArray)(function (v4) {
                                  return {
                                      identifier: ident,
                                      "module'": v4
                                  };
                              })($40.value0)));
                          };
                          return v3(true);
                      };
                      return v3(true);
                  });
              };
          };
      };
      return IdePurescript_Atom_Util.launchAffAndRaise(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(IdePurescript_Atom_Editor.getActivePosInfo))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(IdePurescript_Atom_Editor.getToken(v.ed))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(""))(function ($56) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function (v1) {
                  return v1.word;
              })($56));
          }))))(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(IdePurescript_Atom_PromptPanel.addPromptPanel("Identifier")(v1))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Atom_Editor.getPath(v.ed)))(function (v3) {
                      if (v3 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(LanguageServer_Uri.filenameToUri(v3.value0)))(function (path$prime$prime) {
                              return addIdentImport(v2.value0)(path$prime$prime)(Data_Maybe.Nothing.value);
                          });
                      };
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                  });
              });
          });
      })));
  };
  exports["addExplicitImport"] = addExplicitImport;
  exports["addModuleImport"] = addModuleImport;
})(PS["IdePurescript.Atom.Imports"] = PS["IdePurescript.Atom.Imports"] || {});
(function(exports) {exports.getModel = function(element) {
    return function() {
      if (typeof element.getModel === "function") {
        return element.getModel();
      }
      return null;
    }
  }

  exports.copy = function() {
    atom.clipboard.write(document.getSelection().toString());
  };
})(PS["IdePurescript.Atom.Psci"] = PS["IdePurescript.Atom.Psci"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var match$prime = function (v) {
      if (v instanceof Data_Either.Left) {
          return Data_Function["const"](Data_Maybe.Nothing.value);
      };
      if (v instanceof Data_Either.Right) {
          return Data_String_Regex.match(v.value0);
      };
      throw new Error("Failed pattern match at IdePurescript.Regex line 13, column 1 - line 13, column 79: " + [ v.constructor.name ]);
  };
  exports["match'"] = match$prime;
})(PS["IdePurescript.Regex"] = PS["IdePurescript.Regex"] || {});
(function(exports) {
    'use strict';

  /* eslint-env node*/

  exports.unsafeFromNullable = function unsafeFromNullable (msg) {
      return function (x) {
          if (x === null) throw new Error(msg);
          return x;
      };
  };

  exports.spawnImpl = function spawnImpl (command) {
      return function (args) {
          return function (opts) {
              return function () {
                  return require('child_process').spawn(command, args, opts);
              };
          };
      };
  };

  exports.mkOnClose = function mkOnClose (mkChildExit) {
      return function onClose (cp) {
          return function (cb) {
              return function () {
                  cp.on('exit', function (code, signal) {
                      cb(mkChildExit(code)(signal))();
                  });
              };
          };
      };
  };

  exports.onError = function onError (cp) {
      return function (cb) {
          return function () {
              cp.on('error', function (err) {
                  cb(err)();
              });
          };
      };
  };

  exports.undefined = undefined;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.ChildProcess"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_FS = PS["Node.FS"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Pipe = (function () {
      function Pipe() {

      };
      Pipe.value = new Pipe();
      return Pipe;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var ShareStream = (function () {
      function ShareStream(value0) {
          this.value0 = value0;
      };
      ShareStream.create = function (value0) {
          return new ShareStream(value0);
      };
      return ShareStream;
  })();
  var ShareFD = (function () {
      function ShareFD(value0) {
          this.value0 = value0;
      };
      ShareFD.create = function (value0) {
          return new ShareFD(value0);
      };
      return ShareFD;
  })();
  var Normally = (function () {
      function Normally(value0) {
          this.value0 = value0;
      };
      Normally.create = function (value0) {
          return new Normally(value0);
      };
      return Normally;
  })();
  var BySignal = (function () {
      function BySignal(value0) {
          this.value0 = value0;
      };
      BySignal.create = function (value0) {
          return new BySignal(value0);
      };
      return BySignal;
  })();
  var toStandardError = Unsafe_Coerce.unsafeCoerce;
  var toActualStdIOBehaviour = function (b) {
      if (b instanceof Pipe) {
          return "pipe";
      };
      if (b instanceof Ignore) {
          return "ignore";
      };
      if (b instanceof ShareFD) {
          return b.value0;
      };
      if (b instanceof ShareStream) {
          return b.value0;
      };
      throw new Error("Failed pattern match at Node.ChildProcess line 382, column 28 - line 386, column 33: " + [ b.constructor.name ]);
  };
  var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)(function ($29) {
      return Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour)($29));
  });
  var spawn = function (cmd) {
      return function (args) {
          var convertOpts = function (opts) {
              return {
                  cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                  stdio: toActualStdIOOptions(opts.stdio),
                  env: Data_Nullable.toNullable(opts.env),
                  detached: opts.detached,
                  uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                  gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
              };
          };
          return function ($30) {
              return $foreign.spawnImpl(cmd)(args)(convertOpts($30));
          };
      };
  }; 
  var runChildProcess = function (v) {
      return v;
  };
  var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
  var mkExit = function (code) {
      return function (signal) {
          var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)(function ($32) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create)(Data_Posix_Signal.fromString($32));
          });
          var fromCode = function ($33) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create)(Data_Nullable.toMaybe($33));
          };
          var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
          };
          throw new Error("Failed pattern match at Node.ChildProcess line 152, column 3 - line 155, column 3: " + [ v.constructor.name ]);
      };
  };
  var onClose = $foreign.mkOnClose(mkExit);
  var missingStream = function (str) {
      return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
  };
  var stderr = function ($34) {
      return $foreign.unsafeFromNullable(missingStream("stderr"))((function (v) {
          return v.stderr;
      })(runChildProcess($34)));
  };
  var stdin = function ($35) {
      return $foreign.unsafeFromNullable(missingStream("stdin"))((function (v) {
          return v.stdin;
      })(runChildProcess($35)));
  };
  var stdout = function ($36) {
      return $foreign.unsafeFromNullable(missingStream("stdout"))((function (v) {
          return v.stdout;
      })(runChildProcess($36)));
  };
  var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  exports["stderr"] = stderr;
  exports["stdout"] = stdout;
  exports["stdin"] = stdin;
  exports["toStandardError"] = toStandardError;
  exports["Normally"] = Normally;
  exports["BySignal"] = BySignal;
  exports["onClose"] = onClose;
  exports["spawn"] = spawn;
  exports["defaultSpawnOptions"] = defaultSpawnOptions;
  exports["Pipe"] = Pipe;
  exports["Ignore"] = Ignore;
  exports["ShareStream"] = ShareStream;
  exports["ShareFD"] = ShareFD;
  exports["pipe"] = pipe;
  exports["onError"] = $foreign.onError;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function(exports) {
    "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.FS.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var mkEff = Unsafe_Coerce.unsafeCoerce;
  exports["mkEff"] = mkEff;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
    "use strict";
  var path =require("path");         

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Path"];
  exports["concat"] = $foreign.concat;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];        
  var fs = Node_FS_Internal.unsafeRequireFS;
  var exists = function (file) {
      return Node_FS_Internal.mkEff(function (v) {
          return fs.existsSync(file);
      });
  };
  exports["exists"] = exists;
})(PS["Node.FS.Sync"] = PS["Node.FS.Sync"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Sync = PS["Node.FS.Sync"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];        
  var getRoot = function (path) {
      var getParent = function (p) {
          return Node_Path.concat([ p, ".." ]);
      };
      var pscPackage = Node_Path.concat([ path, "psc-package.json" ]);
      var parent = getParent(path);
      var bower = Node_Path.concat([ path, "bower.json" ]);
      var $2 = path === "" || path === parent;
      if ($2) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value);
      };
      var $3 = Data_String.contains("bower_components")(path) || Data_String.contains(".psc-package")(path);
      if ($3) {
          return getRoot(parent);
      };
      return function __do() {
          var v = Node_FS_Sync.exists(bower)();
          var v1 = Node_FS_Sync.exists(pscPackage)();
          var $6 = v || v1;
          if ($6) {
              return new Data_Maybe.Just(path);
          };
          return getRoot(parent)();
      };
  };
  exports["getRoot"] = getRoot;
})(PS["PscIde.Project"] = PS["PscIde.Project"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["IdePurescript.Atom.Psci"];
  var Ansi_Codes = PS["Ansi.Codes"];
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Config = PS["Atom.Config"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_Grammar = PS["Atom.Grammar"];
  var Atom_GrammarRegistry = PS["Atom.GrammarRegistry"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Atom_Pane = PS["Atom.Pane"];
  var Atom_Point = PS["Atom.Point"];
  var Atom_Project = PS["Atom.Project"];
  var Atom_Range = PS["Atom.Range"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Document = PS["DOM.Node.Document"];
  var DOM_Node_Element = PS["DOM.Node.Element"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_Util = PS["DOM.Util"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Global = PS["Global"];
  var IdePurescript_Atom_PromptPanel = PS["IdePurescript.Atom.PromptPanel"];
  var IdePurescript_Atom_Util = PS["IdePurescript.Atom.Util"];
  var IdePurescript_Regex = PS["IdePurescript.Regex"];
  var Node_ChildProcess = PS["Node.ChildProcess"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var PscIde_Project = PS["PscIde.Project"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Rgb = (function () {
      function Rgb(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Rgb.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Rgb(value0, value1, value2);
              };
          };
      };
      return Rgb;
  })();
  var xtermColor = function (c) {
      if (c instanceof Ansi_Codes.White) {
          return new Rgb(229, 229, 229);
      };
      if (c instanceof Ansi_Codes.Black) {
          return new Rgb(0, 0, 0);
      };
      if (c instanceof Ansi_Codes.Blue) {
          return new Rgb(0, 0, 238);
      };
      if (c instanceof Ansi_Codes.Cyan) {
          return new Rgb(0, 205, 205);
      };
      if (c instanceof Ansi_Codes.Green) {
          return new Rgb(0, 205, 0);
      };
      if (c instanceof Ansi_Codes.Magenta) {
          return new Rgb(205, 0, 205);
      };
      if (c instanceof Ansi_Codes.Red) {
          return new Rgb(205, 0, 0);
      };
      if (c instanceof Ansi_Codes.Yellow) {
          return new Rgb(205, 205, 0);
      };
      if (c instanceof Ansi_Codes.Grey) {
          return new Rgb(127, 127, 127);
      };
      if (c instanceof Ansi_Codes.BrightBlack) {
          return new Rgb(127, 127, 127);
      };
      if (c instanceof Ansi_Codes.BrightRed) {
          return new Rgb(255, 0, 0);
      };
      if (c instanceof Ansi_Codes.BrightGreen) {
          return new Rgb(0, 255, 0);
      };
      if (c instanceof Ansi_Codes.BrightYellow) {
          return new Rgb(255, 255, 0);
      };
      if (c instanceof Ansi_Codes.BrightBlue) {
          return new Rgb(92, 92, 255);
      };
      if (c instanceof Ansi_Codes.BrightMagenta) {
          return new Rgb(255, 0, 255);
      };
      if (c instanceof Ansi_Codes.BrightCyan) {
          return new Rgb(0, 255, 255);
      };
      if (c instanceof Ansi_Codes.BrightWhite) {
          return new Rgb(255, 255, 255);
      };
      throw new Error("Failed pattern match at IdePurescript.Atom.Psci line 146, column 16 - line 165, column 1: " + [ c.constructor.name ]);
  };
  var renderRgbCss = function (v) {
      return "rgb(" + (Data_Show.show(Data_Show.showInt)(v.value0) + ("," + (Data_Show.show(Data_Show.showInt)(v.value1) + ("," + (Data_Show.show(Data_Show.showInt)(v.value2) + ")")))));
  };
  var registerCommands = function __do() {
      var v = Atom_Atom.getAtom();
      return Atom_CommandRegistry.addCommand(v.commands)(".psci-pane")("ide-purescript:psci-copy")(Data_Function["const"]($foreign.copy))();
  };
  var paneUri = "purescript://psci";
  var getProjectRoot = function __do() {
      var v = Atom_Atom.getAtom();
      var v1 = Atom_Project.getPaths(v.project)();
      var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Array.catMaybes)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(PscIde_Project.getRoot)(v1))();
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return v3.head;
      })(Data_Array.uncons(v2));
  };
  var createElement$prime = function (elt) {
      return function __do() {
          var v = Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToDocument)(Control_Bind.bind(Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.document))();
          return DOM_Node_Document.createElement(elt)(v)();
      };
  };
  var opener = function (s) {
      var v = Data_String.indexOf(paneUri)(s);
      if (v instanceof Data_Maybe.Just && v.value0 === 0) {
          return function __do() {
              var v1 = createElement$prime("div")();
              DOM_Node_Element.setClassName("psci-pane")(v1)();
              DOM_Node_Element.setAttribute("tabindex")("0")(v1)();
              var v2 = createElement$prime("div")();
              DOM_Node_Element.setClassName("psci-lines")(v2)();
              var v3 = DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(v2))(DOM_Node_Types.elementToNode(v1))();
              var v4 = createElement$prime("div")();
              DOM_Node_Element.setClassName("psci-input padded inset-panel")(v4)();
              var v5 = createElement$prime("atom-text-editor")();
              DOM_Node_Element.setAttribute("mini")("true")(v5)();
              var v6 = DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(v5))(DOM_Node_Types.elementToNode(v4))();
              var v7 = DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(v4))(DOM_Node_Types.elementToNode(v1))();
              DOM_Util.setTimeout(10)(IdePurescript_Atom_PromptPanel.focus(v5))();
              return Data_Nullable.toNullable(new Data_Maybe.Just({
                  getTitle: function (v8) {
                      return "PSCI";
                  },
                  element: v1
              }));
          };
      };
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
  };
  var openPsci = Control_Monad_Aff.makeAff(function (err) {
      return function (cb) {
          return function __do() {
              var v = Atom_Atom.getAtom();
              var v1 = Atom_Workspace.addOpener(v.workspace)(opener)();
              return Atom_Workspace.open(v.workspace)(paneUri)((function () {
                  var $81 = {};
                  for (var $82 in Atom_Workspace.defaultOpenOptions) {
                      if ({}.hasOwnProperty.call(Atom_Workspace.defaultOpenOptions, $82)) {
                          $81[$82] = Atom_Workspace["defaultOpenOptions"][$82];
                      };
                  };
                  $81.split = "right";
                  $81.activatePane = false;
                  return $81;
              })())(cb)(err(Control_Monad_Eff_Exception.error("Can't Open PSCI")))();
          };
      };
  });
  var colorForCode = function (c) {
      if (c === 30) {
          return new Data_Maybe.Just(Ansi_Codes.Black.value);
      };
      if (c === 31) {
          return new Data_Maybe.Just(Ansi_Codes.Red.value);
      };
      if (c === 32) {
          return new Data_Maybe.Just(Ansi_Codes.Green.value);
      };
      if (c === 33) {
          return new Data_Maybe.Just(Ansi_Codes.Yellow.value);
      };
      if (c === 34) {
          return new Data_Maybe.Just(Ansi_Codes.Blue.value);
      };
      if (c === 35) {
          return new Data_Maybe.Just(Ansi_Codes.Magenta.value);
      };
      if (c === 36) {
          return new Data_Maybe.Just(Ansi_Codes.Cyan.value);
      };
      if (c === 37) {
          return new Data_Maybe.Just(Ansi_Codes.White.value);
      };
      if (c === 90) {
          return new Data_Maybe.Just(Ansi_Codes.Grey.value);
      };
      if (c === 91) {
          return new Data_Maybe.Just(Ansi_Codes.BrightRed.value);
      };
      if (c === 92) {
          return new Data_Maybe.Just(Ansi_Codes.BrightGreen.value);
      };
      if (c === 93) {
          return new Data_Maybe.Just(Ansi_Codes.BrightYellow.value);
      };
      if (c === 94) {
          return new Data_Maybe.Just(Ansi_Codes.BrightBlue.value);
      };
      if (c === 95) {
          return new Data_Maybe.Just(Ansi_Codes.BrightMagenta.value);
      };
      if (c === 96) {
          return new Data_Maybe.Just(Ansi_Codes.BrightCyan.value);
      };
      if (c === 97) {
          return new Data_Maybe.Just(Ansi_Codes.BrightWhite.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var replaceAnsiColor = function (text) {
      var parts = Data_Either.either(Data_Function["const"]([  ]))(function (r) {
          return Data_String_Regex.split(r)(text);
      })(Data_String_Regex.regex("(\\x1b\\[[0-9;]+m)")(Data_String_Regex_Flags.noFlags));
      var colorCss = function (n) {
          return "color: " + Data_Maybe.maybe("black")(function ($159) {
              return renderRgbCss(xtermColor($159));
          })(colorForCode(n));
      };
      var colEscape = function (str) {
          var v = IdePurescript_Regex["match'"](Data_String_Regex.regex("\\x1b\\[([0-9]+)m")(Data_String_Regex_Flags.noFlags))(str);
          if (v instanceof Data_Maybe.Just && (v.value0.length === 2 && v["value0"][1] instanceof Data_Maybe.Just)) {
              return Data_Int.fromNumber(Global.readInt(10)(v["value0"][1].value0));
          };
          return Data_Maybe.Nothing.value;
      };
      var toNodes = function (v) {
          if (v.length === 0) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)([  ]);
          };
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Maybe.maybe(Data_Maybe.Nothing.value)(colEscape)(Data_Array.index(v)(2)))(new Data_Maybe.Just(0)) && Data_Maybe.isJust(Data_Maybe.maybe(Data_Maybe.Nothing.value)(colEscape)(Data_Array.index(v)(0)))) {
              var v1 = Data_Array.index(v)(1);
              var v2 = Data_Maybe.maybe(Data_Maybe.Nothing.value)(colEscape)(Data_Array.index(v)(0));
              if (v2 instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v3 = createElement$prime("span")();
                      DOM_Node_Node.setTextContent(v1.value0)(DOM_Node_Types.elementToNode(v3))();
                      DOM_Node_Element.setAttribute("style")(colorCss(v2.value0))(v3)();
                      var v4 = toNodes(Data_Array.drop(3)(v))();
                      return Data_Array.cons(v3)(v4);
                  };
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)([  ]);
          };
          var str = Data_Maybe.fromMaybe("")(Data_Array.index(v)(0));
          return function __do() {
              var v1 = createElement$prime("span")();
              DOM_Node_Node.setTextContent(str)(DOM_Node_Types.elementToNode(v1))();
              var v2 = toNodes(Data_Array.drop(1)(v))();
              return Data_Array.cons(v1)(v2);
          };
      };
      return toNodes(parts);
  };
  var clearText = function (v) {
      var node = DOM_Node_Types.elementToNode(v.element);
      return Control_Monad_Eff.whileE(DOM_Node_Node.hasChildNodes(node))(function __do() {
          var v1 = DOM_Node_Node.firstChild(node)();
          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function ($160) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Function.flip(DOM_Node_Node.removeChild)(node)($160));
          })(v1)();
      });
  };
  var appendText = function (v) {
      return function (text) {
          return function __do() {
              var v1 = createElement$prime("div")();
              DOM_Node_Element.setClassName("psci-line")(v1)();
              Control_Bind.bind(Control_Monad_Eff.bindEff)(replaceAnsiColor(text))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(function (node) {
                  return DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(node))(DOM_Node_Types.elementToNode(v1));
              }))();
              var v2 = DOM_Node_ParentNode.querySelector(".psci-lines")(DOM_Node_Types.elementToParentNode(v.element))();
              return Data_Maybe.maybe(Control_Monad_Eff_Console.log("appendText failed"))(function (lines$prime) {
                  return function __do() {
                      var v3 = DOM_Node_Node.appendChild(DOM_Node_Types.elementToNode(v1))(DOM_Node_Types.elementToNode(lines$prime))();
                      var v4 = DOM_Node_Element.scrollHeight(lines$prime)();
                      return DOM_Node_Element.setScrollTop(v4)(lines$prime)();
                  };
              })(v2)();
          };
      };
  };
  var sendText = function (pane) {
      return function (proc) {
          return function (text) {
              var text$prime = Data_String.trim(text) + "\x0a";
              return function __do() {
                  appendText(pane)(text$prime)();
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Node_Stream.writeString(Node_ChildProcess.stdin(proc))(Node_Encoding.UTF8.value)(text$prime)(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))();
              };
          };
      };
  };
  var closePsci = function (pane) {
      return function (proc) {
          return function __do() {
              sendText(pane)(proc)(":q")();
              return Node_Stream.end(Node_ChildProcess.stdin(proc))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))();
          };
      };
  };
  var sendText$prime = function (getText) {
      return function (pane) {
          return function (proc) {
              return function __do() {
                  var v = Atom_Atom.getAtom();
                  var v1 = Atom_Workspace.getActiveTextEditor(v.workspace)();
                  return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (ed) {
                      return function __do() {
                          var v2 = getText(ed)();
                          return sendText(pane)(proc)(v2)();
                      };
                  })(v1)();
              };
          };
      };
  };
  var sendLine = sendText$prime(function (ed) {
      return function __do() {
          var v = Atom_Editor.getCursorBufferPosition(ed)();
          var p = function (c) {
              return Atom_Point.mkPoint(Atom_Point.getRow(v))(c);
          };
          var v1 = Atom_Editor.getTextInRange(ed)(Atom_Range.mkRange(p(0))(p(1000)))();
          Atom_Editor.moveDown(ed)(1)();
          Atom_Editor.moveToBeginningOfLine(ed)();
          return v1;
      };
  });
  var sendSelection = sendText$prime(Atom_Editor.getSelectedText);
  var startRepl = function (paneRef) {
      return function (psciRef) {
          var liftEff$prime$prime = Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff);
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(liftEff$prime$prime(Atom_Atom.getAtom))(function (v) {
              var notifyErr = function (msg) {
                  return function __do() {
                      Control_Monad_Eff_Console.log(msg)();
                      return Atom_NotificationManager.addError(v.notifications)(msg)();
                  };
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(openPsci)(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(liftEff$prime$prime(function __do() {
                      Control_Monad_Eff_Ref.writeRef(paneRef)(new Data_Maybe.Just(v1))();
                      Control_Monad_Eff_Console.log("Started PSCI")();
                      var v2 = Atom_GrammarRegistry.grammarForScopeName(v.grammars)("source.purescript.psci")();
                      return Data_Unit.unit;
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(liftEff$prime$prime(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(Data_Functor.functorFn)(Control_Monad_Except.runExcept)(Data_Foreign.readString))(Atom_Config.getConfig(v.config)("ide-purescript.psciCommand"))))(function (v2) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(liftEff$prime$prime(getProjectRoot))(function (v3) {
                              var command = (function () {
                                  var v4 = Data_String_Regex.regex("\\s+")(Data_String_Regex_Flags.noFlags);
                                  if (v2 instanceof Data_Either.Right && v4 instanceof Data_Either.Right) {
                                      return Data_String_Regex.split(v4.value0)(v2.value0);
                                  };
                                  return [  ];
                              })();
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(liftEff$prime$prime((function () {
                                  var v4 = Data_Array.uncons(command);
                                  if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Just) {
                                      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.Just.create)(Node_ChildProcess.spawn(v4.value0.head)(v4.value0.tail)((function () {
                                          var $124 = {};
                                          for (var $125 in Node_ChildProcess.defaultSpawnOptions) {
                                              if ({}.hasOwnProperty.call(Node_ChildProcess.defaultSpawnOptions, $125)) {
                                                  $124[$125] = Node_ChildProcess["defaultSpawnOptions"][$125];
                                              };
                                          };
                                          $124.cwd = v3;
                                          return $124;
                                      })()));
                                  };
                                  if (v3 instanceof Data_Maybe.Nothing) {
                                      return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(Data_Maybe.Nothing.value)(notifyErr("Couldn't find project root, are you in a PureScript project?"));
                                  };
                                  if (v4 instanceof Data_Maybe.Nothing) {
                                      return Data_Functor.voidRight(Control_Monad_Eff.functorEff)(Data_Maybe.Nothing.value)(notifyErr("Couldn't parse PSCI command: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(command)));
                                  };
                                  throw new Error("Failed pattern match at IdePurescript.Atom.Psci line 271, column 30 - line 275, column 91: " + [ v3.constructor.name, v4.constructor.name ]);
                              })()))(function (v4) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(liftEff$prime$prime(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function ($161) {
                                      return Control_Monad_Eff_Ref.writeRef(psciRef)(Data_Maybe.Just.create($161));
                                  })(v4)))(function () {
                                      return liftEff$prime$prime(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (proc) {
                                          return Control_Monad_Eff_Exception.catchException(function (e) {
                                              return notifyErr("Couldn't launch PSCI: " + Data_Show.show(Control_Monad_Eff_Exception.showError)(e));
                                          })(function __do() {
                                              Node_Stream.onDataString(Node_ChildProcess.stdout(proc))(Node_Encoding.UTF8.value)(appendText(v1))();
                                              Node_Stream.onDataString(Node_ChildProcess.stderr(proc))(Node_Encoding.UTF8.value)(appendText(v1))();
                                              Node_ChildProcess.onError(proc)(function ($162) {
                                                  return notifyErr(Data_Show.show(Control_Monad_Eff_Exception.showError)(Node_ChildProcess.toStandardError($162)));
                                              })();
                                              Node_ChildProcess.onClose(proc)(function (exit) {
                                                  if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                                                      return Control_Monad_Eff_Console.log("psci exited successfully");
                                                  };
                                                  return notifyErr("PSCI exited abnormally");
                                              })();
                                              var v5 = DOM_Node_ParentNode.querySelector(".psci-input atom-text-editor")(DOM_Node_Types.elementToParentNode(v1.element))();
                                              (function () {
                                                  if (v5 instanceof Data_Maybe.Just) {
                                                      return function __do() {
                                                          var v6 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign.getModel(v5.value0))();
                                                          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (ed) {
                                                              return Atom_CommandRegistry["addCommand'"](v.commands)(v5.value0)("core:confirm")(function (v7) {
                                                                  return function __do() {
                                                                      var v8 = Atom_Editor.getText(ed)();
                                                                      var v9 = Atom_Editor.setText(ed)("")();
                                                                      return sendText(v1)(proc)(v8)();
                                                                  };
                                                              });
                                                          })(v6)();
                                                      };
                                                  };
                                                  if (v5 instanceof Data_Maybe.Nothing) {
                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                  };
                                                  throw new Error("Failed pattern match at IdePurescript.Atom.Psci line 287, column 5 - line 298, column 27: " + [ v5.constructor.name ]);
                                              })()();
                                              return Control_Monad_Eff_Console.log("Started PSCI")();
                                          });
                                      })(v4));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var activate = function __do() {
      var v = Atom_Atom.getAtom();
      var v1 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
      var v2 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
      var close = function __do() {
          var v3 = Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(Control_Monad_Eff_Ref.readRef(v1))();
          var v4 = Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(Control_Monad_Eff_Ref.readRef(v2))();
          if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Just) {
              closePsci(v3.value0)(v4.value0)();
              Control_Monad_Eff_Ref.writeRef(v2)(Data_Maybe.Nothing.value)();
              Control_Monad_Eff_Ref.writeRef(v1)(Data_Maybe.Nothing.value)();
              var v5 = Atom_Workspace.paneForItem(v.workspace)(v3.value0)();
              if (v5 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Atom_Pane.destroyItem(v5.value0)(v3.value0))();
              };
              if (v5 instanceof Data_Maybe.Nothing) {
                  return Data_Unit.unit;
              };
              throw new Error("Failed pattern match at IdePurescript.Atom.Psci line 327, column 13 - line 329, column 35: " + [ v5.constructor.name ]);
          };
          return Data_Unit.unit;
      };
      var runCmd = function (c) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1)))(function (v3) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v2)))(function (v4) {
                  if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Just) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(c(v3.value0)(v4.value0));
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(startRepl(v1)(v2))(function () {
                      return runCmd(c);
                  });
              });
          });
      };
      var open = IdePurescript_Atom_Util.launchAffAndRaise(startRepl(v1)(v2));
      var reset = function __do() {
          var v3 = Control_Monad_Eff_Ref.readRef(v1)();
          close();
          Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(clearText)(v3)();
          return open();
      };
      var cmd = function (isEditor) {
          return function (name) {
              return function (action) {
                  var scope = (function () {
                      if (isEditor) {
                          return "atom-text-editor";
                      };
                      return "atom-workspace";
                  })();
                  return Atom_CommandRegistry.addCommand(v.commands)("atom-workspace")("ide-purescript:psci-" + name)(Data_Function["const"](action));
              };
          };
      };
      cmd(false)("open")(reset)();
      cmd(true)("send-line")(IdePurescript_Atom_Util.launchAffAndRaise(runCmd(sendLine)))();
      cmd(true)("send-selection")(IdePurescript_Atom_Util.launchAffAndRaise(runCmd(sendSelection)))();
      return cmd(true)("reset")(reset)();
  };
  exports["paneUri"] = paneUri;
  exports["registerCommands"] = registerCommands;
  exports["opener"] = opener;
  exports["openPsci"] = openPsci;
  exports["colorForCode"] = colorForCode;
  exports["Rgb"] = Rgb;
  exports["xtermColor"] = xtermColor;
  exports["renderRgbCss"] = renderRgbCss;
  exports["replaceAnsiColor"] = replaceAnsiColor;
  exports["appendText"] = appendText;
  exports["clearText"] = clearText;
  exports["sendText"] = sendText;
  exports["sendLine"] = sendLine;
  exports["closePsci"] = closePsci;
  exports["sendSelection"] = sendSelection;
  exports["startRepl"] = startRepl;
  exports["getProjectRoot"] = getProjectRoot;
  exports["activate"] = activate;
})(PS["IdePurescript.Atom.Psci"] = PS["IdePurescript.Atom.Psci"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Atom_Atom = PS["Atom.Atom"];
  var Atom_CommandRegistry = PS["Atom.CommandRegistry"];
  var Atom_Config = PS["Atom.Config"];
  var Atom_Editor = PS["Atom.Editor"];
  var Atom_Grammar = PS["Atom.Grammar"];
  var Atom_NotificationManager = PS["Atom.NotificationManager"];
  var Atom_Pane = PS["Atom.Pane"];
  var Atom_Project = PS["Atom.Project"];
  var Atom_Workspace = PS["Atom.Workspace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var IdePurescript_Atom_Assist = PS["IdePurescript.Atom.Assist"];
  var IdePurescript_Atom_BuildStatus = PS["IdePurescript.Atom.BuildStatus"];
  var IdePurescript_Atom_Config = PS["IdePurescript.Atom.Config"];
  var IdePurescript_Atom_Hooks_Dependencies = PS["IdePurescript.Atom.Hooks.Dependencies"];
  var IdePurescript_Atom_Hooks_LanguageClient = PS["IdePurescript.Atom.Hooks.LanguageClient"];
  var IdePurescript_Atom_Hooks_Linter = PS["IdePurescript.Atom.Hooks.Linter"];
  var IdePurescript_Atom_Hooks_StatusBar = PS["IdePurescript.Atom.Hooks.StatusBar"];
  var IdePurescript_Atom_Imports = PS["IdePurescript.Atom.Imports"];
  var IdePurescript_Atom_Psci = PS["IdePurescript.Atom.Psci"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_ChildProcess = PS["Node.ChildProcess"];
  var Node_FS = PS["Node.FS"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];
  var PscIde = PS["PscIde"];        
  var raiseError = function (e) {
      return function __do() {
          var v = Atom_Atom.getAtom();
          return Atom_NotificationManager.addError(v.notifications)(Data_Show.show(Control_Monad_Eff_Exception.showError)(e))();
      };
  };
  var main = function __do() {
      Control_Monad_Eff_Console.log("PureScript: Starting!")();
      var v = Atom_Atom.getAtom();
      var activate = function __do() {
          IdePurescript_Atom_Psci.registerCommands();
          IdePurescript_Atom_Hooks_Dependencies.installDependencies();
          return IdePurescript_Atom_Psci.activate();
      };
      var v1 = IdePurescript_Atom_BuildStatus.getBuildStatus();
      var v2 = Control_Monad_Eff_Uncurried.runEffFn3(IdePurescript_Atom_Hooks_LanguageClient.makeLanguageClient)({
          config: IdePurescript_Atom_Config.config,
          consumeStatusBar: Control_Monad_Eff_Uncurried.mkEffFn1(function (statusBar) {
              return IdePurescript_Atom_Hooks_StatusBar.addLeftTile(statusBar)({
                  item: v1,
                  priority: -50 | 0
              });
          })
      })(IdePurescript_Atom_Config.translateConfig)(Control_Monad_Eff_Uncurried.mkEffFn1(function (conn) {
          return function __do() {
              activate();
              var fwdCmd = function (name) {
                  return function (name$prime) {
                      return Atom_CommandRegistry.addCommand(v.commands)("atom-workspace")("ide-purescript:" + name)(Data_Function["const"](IdePurescript_Atom_Assist.launchAffAndRaise(IdePurescript_Atom_Hooks_LanguageClient.executeCommand(conn)({
                          command: "purescript." + name$prime,
                          "arguments": [  ]
                      }))));
                  };
              };
              var fwdCmd$prime = function (name) {
                  return fwdCmd(name)(name);
              };
              var cmd = function (name) {
                  return function (action) {
                      return Atom_CommandRegistry.addCommand(v.commands)("atom-workspace")("ide-purescript:" + name)(function (v2) {
                          return action(conn);
                      });
                  };
              };
              cmd("add-module-import")(IdePurescript_Atom_Imports.addModuleImport)();
              cmd("add-explicit-import")(IdePurescript_Atom_Imports.addExplicitImport)();
              cmd("case-split")(IdePurescript_Atom_Assist.caseSplit)();
              cmd("add-clause")(IdePurescript_Atom_Assist.addClause)();
              fwdCmd$prime("build")();
              fwdCmd("restart-psc-ide")("restartPscIde")();
              fwdCmd("start-psc-ide")("startPscIde")();
              fwdCmd("stop-psc-ide")("stopPscIde")();
              IdePurescript_Atom_Hooks_LanguageClient.onCustom(conn)("textDocument/diagnosticsBegin")(function (v2) {
                  return IdePurescript_Atom_BuildStatus.updateBuildStatus(v1)(IdePurescript_Atom_BuildStatus.Building.value);
              })();
              return IdePurescript_Atom_Hooks_LanguageClient.onCustom(conn)("textDocument/diagnosticsEnd")(function (v2) {
                  return IdePurescript_Atom_BuildStatus.updateBuildStatus(v1)(IdePurescript_Atom_BuildStatus.NotBuilding.value);
              })();
          };
      }))();
      return Data_Foreign.toForeign(v2);
  };
  var logError = function (e) {
      return Control_Monad_Eff_Console.error(Data_Show.show(Control_Monad_Eff_Exception.showError)(e));
  };
  var ignoreError = function (v) {
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
  };
  exports["main"] = main;
  exports["raiseError"] = raiseError;
  exports["ignoreError"] = ignoreError;
  exports["logError"] = logError;
})(PS["IdePurescript.Atom.Main"] = PS["IdePurescript.Atom.Main"] || {});
module.exports = PS["IdePurescript.Atom.Main"].main()
